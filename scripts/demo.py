#!/usr/bin/env python3
"""
MUSE v3 Interactive Demo
========================

Interactive demonstration of MUSE v3 capabilities including:
- Multimodal conversation handling
- Cross-lingual support (Hindi-English)
- Dynamic tool orchestration
- Real-time response generation
"""

import json
import sys
import os
from pathlib import Path
from typing import Dict, List, Any

# Add MUSE v3 to path
sys.path.append(str(Path(__file__).parent.parent / "muse_v3_advanced"))

try:
    from muse_v3_system import MuseV3System
    from architecture import MuseV3Architecture
    MUSE_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  MUSE v3 components not available. Running in simulation mode.")
    MUSE_AVAILABLE = False

class MuseDemo:
    """Interactive MUSE v3 demonstration"""
    
    def __init__(self):
        self.conversation_history = []
        self.user_profile = {
            "preferences": {},
            "language": "en",
            "session_id": "demo_session_001"
        }
        
        if MUSE_AVAILABLE:
            try:
                self.system = MuseV3System()
                print("‚úÖ MUSE v3 system loaded successfully")
            except Exception as e:
                print(f"‚ö†Ô∏è  Could not initialize MUSE v3: {e}")
                print("Running in simulation mode...")
                self.system = None
        else:
            self.system = None
    
    def simulate_response(self, user_input: str) -> Dict[str, Any]:
        """Simulate MUSE response when system is not available"""
        
        # Simple simulation based on input content
        response_data = {
            "response": "",
            "tool_calls": [],
            "intent": "search",
            "language_detected": "en",
            "confidence": 0.85
        }
        
        # Detect language
        if any(char in user_input for char in "‡§π‡§ø‡§Ö‡§Ü‡§á‡§à‡§â‡§ä‡§è‡§ê‡§ì‡§î‡§ï‡§ñ‡§ó‡§ò‡§ö‡§õ‡§ú‡§ù‡§ü‡§†‡§°‡§¢‡§£‡§§‡§•‡§¶‡§ß‡§®‡§™‡§´‡§¨‡§≠‡§Æ‡§Ø‡§∞‡§≤‡§µ‡§∂‡§∑‡§∏‡§π‡§ï‡•ç‡§∑"):
            response_data["language_detected"] = "hi"
        
        # Simulate tool calls based on keywords
        if any(word in user_input.lower() for word in ["find", "search", "‡§¢‡•Ç‡§Ç‡§¢", "‡§ö‡§æ‡§π‡§ø‡§è"]):
            response_data["tool_calls"].append({
                "tool_name": "search",
                "arguments": {"query": "extracted from user input"},
                "confidence": 0.9
            })
            
        if any(word in user_input.lower() for word in ["recommend", "suggest", "‡§∏‡•Å‡§ù‡§æ‡§µ", "‡§¨‡•á‡§π‡§§‡§∞"]):
            response_data["tool_calls"].append({
                "tool_name": "recommend", 
                "arguments": {"user_preferences": "inferred"},
                "confidence": 0.85
            })
            
        if any(word in user_input.lower() for word in ["compare", "comparison", "‡§§‡•Å‡§≤‡§®‡§æ"]):
            response_data["tool_calls"].append({
                "tool_name": "compare",
                "arguments": {"items": ["item1", "item2"]},
                "confidence": 0.88
            })
        
        # Generate appropriate response
        if response_data["language_detected"] == "hi":
            response_data["response"] = f"‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§‡•§ ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§ {len(response_data['tool_calls'])} tools ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§"
        else:
            response_data["response"] = f"I understand your request. Let me help you find what you're looking for using {len(response_data['tool_calls'])} specialized tools."
        
        return response_data
    
    def process_input(self, user_input: str) -> Dict[str, Any]:
        """Process user input and generate response"""
        
        if self.system:
            try:
                # Use real MUSE system
                response = self.system.process_conversation(
                    user_input=user_input,
                    session_context={
                        "user_profile": self.user_profile,
                        "conversation_history": self.conversation_history[-5:],  # Last 5 turns
                        "language": self.user_profile["language"]
                    }
                )
                return response
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Error processing with MUSE system: {e}")
                return self.simulate_response(user_input)
        else:
            # Use simulation
            return self.simulate_response(user_input)
    
    def display_response(self, response_data: Dict[str, Any]):
        """Display formatted response"""
        
        print(f"\nü§ñ MUSE v3: {response_data['response']}")
        
        # Show detected language
        lang_name = "Hindi" if response_data["language_detected"] == "hi" else "English"
        print(f"   üó£Ô∏è  Language: {lang_name}")
        
        # Show tool calls
        if response_data["tool_calls"]:
            print(f"   üõ†Ô∏è  Tools used:")
            for i, tool_call in enumerate(response_data["tool_calls"], 1):
                tool_name = tool_call["tool_name"]
                args = tool_call.get("arguments", {})
                confidence = tool_call.get("confidence", 0.0)
                print(f"      {i}. {tool_name}() - {args} (confidence: {confidence:.2f})")
        
        # Show intent and confidence
        intent = response_data.get("intent", "unknown")
        confidence = response_data.get("confidence", 0.0)
        print(f"   üéØ Intent: {intent} (confidence: {confidence:.2f})")
    
    def run_demo(self):
        """Run interactive demo"""
        
        print("üöÄ MUSE v3 Interactive Demo")
        print("=" * 50)
        print("Features demonstrated:")
        print("- Multimodal conversation understanding")
        print("- Cross-lingual support (Hindi-English)")
        print("- Dynamic tool orchestration")
        print("- Context-aware responses")
        print("\nType 'quit' to exit, 'examples' for sample inputs")
        print("-" * 50)
        
        while True:
            try:
                user_input = input("\nüë§ You: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    print("\nüëã Thank you for trying MUSE v3!")
                    break
                
                if user_input.lower() == 'examples':
                    self.show_examples()
                    continue
                
                if user_input.lower() == 'clear':
                    self.conversation_history.clear()
                    print("üóëÔ∏è  Conversation history cleared")
                    continue
                
                if not user_input:
                    continue
                
                # Process input
                print("\nü§î Processing...")
                response_data = self.process_input(user_input)
                
                # Display response
                self.display_response(response_data)
                
                # Store in conversation history
                self.conversation_history.append({
                    "user": user_input,
                    "system": response_data["response"],
                    "tool_calls": response_data.get("tool_calls", []),
                    "timestamp": "demo_time"
                })
                
            except KeyboardInterrupt:
                print("\n\nüëã Demo interrupted. Goodbye!")
                break
            except Exception as e:
                print(f"\n‚ùå Error: {e}")
                continue
    
    def show_examples(self):
        """Show example inputs users can try"""
        
        examples = [
            {
                "category": "üîç Product Search",
                "examples": [
                    "Find me casual shirts under 2000 rupees",
                    "‡§Æ‡•Å‡§ù‡•á programming ‡§ï‡•á ‡§≤‡§ø‡§è laptop ‡§ö‡§æ‡§π‡§ø‡§è",
                    "Search for blue formal shirts for office"
                ]
            },
            {
                "category": "üéØ Recommendations", 
                "examples": [
                    "Recommend books for data science beginners",
                    "‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è educational toys suggest ‡§ï‡§∞‡•á‡§Ç",
                    "What laptop would you recommend for gaming?"
                ]
            },
            {
                "category": "‚öñÔ∏è Product Comparison",
                "examples": [
                    "Compare iPhone 15 vs Samsung Galaxy S24",
                    "DELL ‡§î‡§∞ HP ‡§ï‡•á laptops ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§Ö‡§Ç‡§§‡§∞ ‡§π‡•à",
                    "Show me comparison between these 3 headphones"
                ]
            },
            {
                "category": "üîß Advanced Queries",
                "examples": [
                    "Find blue shirts, filter by price under 1500, then recommend top 3",
                    "Programming laptop ‡§ö‡§æ‡§π‡§ø‡§è 80k budget ‡§Æ‡•á‡§Ç with SSD ‡§î‡§∞ 16GB RAM",
                    "Search for formal wear, translate descriptions to Hindi"
                ]
            }
        ]
        
        print("\nüìã Example Inputs to Try:")
        print("=" * 30)
        
        for category in examples:
            print(f"\n{category['category']}:")
            for example in category["examples"]:
                print(f"   ‚Ä¢ {example}")
        
        print(f"\nüí° Tips:")
        print("   ‚Ä¢ Try mixing Hindi and English")
        print("   ‚Ä¢ Ask complex multi-step questions") 
        print("   ‚Ä¢ Use natural conversational language")
        print("   ‚Ä¢ Type 'clear' to reset conversation")

def main():
    """Main demo function"""
    
    # Check if running from correct directory
    if not Path("muse_v3_advanced").exists():
        print("‚ùå Please run this demo from the MUSE repository root directory")
        print("Usage: python scripts/demo.py")
        sys.exit(1)
    
    # Initialize and run demo
    demo = MuseDemo()
    demo.run_demo()

if __name__ == "__main__":
    main()
